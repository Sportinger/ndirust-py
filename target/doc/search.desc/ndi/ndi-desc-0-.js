searchState.loadedDescShard("ndi", 0, "NewTek NDI® Bindings for rust\nReceived an audio frame\nAn audio frame\nA 4:4:4:4, 8-bit image of red, green, blue and alpha …\nA 4:4:4, 8-bit image of red, green, blue components in …\nerror occured (disconnected)\nThis format stands for floating-point audio.\nThis is an individual field 0 from a fielded video frame.\nThis is an individual field 1 from a fielded video frame.\nThe FourCC type of a <code>AudioData</code> frame\nThe FourCC type of a <code>VideoData</code> frame\nA description of the frome format of a frame\nA description of the type of of frame received.\nA planar 4:2:0 in Y, U, V planes in memory with the U, V …\nThis is a frame of video that is comprised of two fields.\nThe data description for metadata\nReceived a metadata frame\nA semi planar 4:2:0 in Y, UV planes in memory.\nnothing changed, usually due to timeout\nA 4:2:2 buffer in semi-planar format with full 16bpp color …\nA 4:2:2:4 buffer in semi-planar format with full 16bpp …\nThis is a progressive video frame\nA 4:4:4:4, 8-bit image of red, green, blue and alpha …\nA 4:4:4, 8-bit image of red, green, blue components\nA descriptor of a NDI source available on the network.\nThis indicates that the settings on this input have …\nTally information\nA buffer that represents a 4:2:2:4 image in YUV color …\nA buffer in the “UYVY” FourCC and represents a 4:2:2 …\nReceived a video frame\nDescribes a video frame\nA planar 4:2:0 in Y, U, V planes in memory.\nThe stride in bytes for a single channel.\nDestroy everything associated with the library\nThe metadata as a UTF8 XML string. This is a NULL …\nThe size of the p_data buffer in bytes.\nThe error type used in this crate\nThe <code>Find</code> struct and related constructs for finding NDI …\nThe FourCC pixel format for this buffer.\nWhat FourCC type is for this frame\nThe frame format type of a video\nThe framerate of the current frame.\nThe denominator of the framerate of the current frame.\nThe numerator of the framerate of the current frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate VideoData from a raw memory buffer, with custom …\nA UTF8 string that provides a user readable name for this …\nThe height of the frame expressed in pixels.\nStart the library\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecover whether the current CPU in the system is capable …\nThe length of the string in UTF8 characters. This includes …\nThis is the inter-line stride of the video data, in bytes.\nA per frame metadata stream that should be XML\nThis is a per frame metadata stream in XML\nCreate an empty video frame\nCreate new instance of AudioData\nCreate new metadata struct\nCreate a new <code>Tally</code> instance.\nThe number of audio channels\nThe number of audio samples per channel\nIs this currently on preview output\nIs this currently on program output\nThe video data itself laid out linearly in memory\nA pointer to the audio data\nThe SDK defines picture aspect ratio (as opposed to pixel …\nThe <code>Recv</code> struct and related constructs for receiving NDI\nThe sample-rate of this buffer\nThe <code>Send</code> struct and related constructs for sending NDI\nThe timecode of this frame in 100 ns intervals.\nThe timecode of this frame in 100ns intervals\nThe timecode of this frame in 100ns intervals\nA per-frame timestamp filled in by the NDI SDK using a …\nA per-frame timestamp filled in by the NDI SDK using a …\nThe width of the frame expressed in pixels.\nFailed to create an instance of Find\nFindng the current sources timed out\nFailed to convert a c <code>int</code> into an <code>enum</code>\nThe system is not compatible with NDI\nFailed to create an instance of Recv\nFailed to create an instance of Send\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA struct to locate sources available on the network\nBuilder for <code>Find</code> struct\nBuild an instance of <code>Find</code>\nList current sources\nspecify a comma separated list of IP addresses that will be\nReturns the argument unchanged.\nReturns the argument unchanged.\nSpecifies groups for which this NDI finder will report …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance with default constructor\nCreate new builder\nTells the finder whether it should locate and report NDI …\nReceive metadata + audio.\nBGRX or BGRA\nVaries, see <code>RecvColorFormat</code>\nNormally UYVY, see <code>RecvColorFormat</code>\nReceive metadata, audio, video at full resolution.\nReceive metadata, audio, video at a lower bandwidth and …\nReceive metadata only.\nRGBX or RGBA\nThe NDI receiver struct\nSpecify whether this connection is in high or low …\nBuilder struct for <code>Recv</code>\nDetermines what color formats you are passed when a frame …\nCurrent performance levels of the receiving.\nCheck the current queue size\nUYVY or BGRA\nUYVY or RGBA\nAdd a connection metadata string to the list of what is …\nIf your application does not like receiving fielded video …\nnumber of audio frames\nNumber of audio frames in queue\nSelect a bandwidth mode\nBuild the <code>Recv</code>\nReceive video, audio and metadata frames.\nReceive audio frame\nReceive metadata frame\nReceive video frame\nChoose the color format of preference\nConnect to a source\nwhether the Recv is currently connected\nDisconnect from all sources\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current number of sources connected to\nGet the performance metrics (total, dropped)\nGet the current queue sizes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of metadata frames\nNumber of metadata frames in queue\nThe name of the NDI receiver to create\nCreate new receiver which isn’t connected to any sources\nCreate a new instance of the builder\nCreate new queue size\nClear all connection metadata\nSend metadata to sender\nSet tally info for sender\nChoose the <code>Source</code> to connect to\nnumber of video frames\nNumber of video frames in queue\nA sender struct for sending NDI\nBuilder struct for <code>Send</code>\nBuild the <code>Send</code> instance\nThis allows you to receive metadata from the other end of …\nspecify whether audio “clock” themself.\nSpecify whether video “clock” themself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current number of receivers connected to this …\nRetrieve the source information for the given sender …\nGet the current tally\nSpecify the groups that this NDI sender should place …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the name of the NDI source to create.\nCreate a new instance with default parameters\nCreate new builder instance\nThis will add an audio frame\nThis will add a metadata frame\nThis will add a video frame\nThis will add a video frame and will return immediately, …")