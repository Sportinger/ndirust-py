Metadata-Version: 2.4
Name: ndirust-py
Version: 0.1.0
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Rust
Classifier: Topic :: Multimedia :: Video
Classifier: Topic :: Software Development :: Libraries :: Python Modules
License-File: LICENSE
Summary: Python bindings for NewTek NDI using Rust
Keywords: ndi,video,rust,bindings
Author-email: NDI Rust Python Bindings Team <your_email@example.com>
Requires-Python: >=3.7
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Homepage, https://github.com/yourusername/ndirust-py
Project-URL: Repository, https://github.com/yourusername/ndirust-py
Project-URL: Issues, https://github.com/yourusername/ndirust-py/issues

# ndirust-py: Python NDI Bindings

This project provides Python bindings for NewTek's NDI® (Network Device Interface) technology using Rust via PyO3.

## Features

- ✅ NDI initialization check
- ✅ Source discovery on the network
- ✅ Video frame sending
- ⚠️ Receiver (placeholder implementation)

## Requirements

- Python 3.7 or higher
- [NDI SDK](https://ndi.tv/tools/) installed on your system

## Installation

### 1. Install the NDI SDK

First, download and install the NDI SDK from https://ndi.tv/tools/

### 2. Install ndirust-py

#### From PyPI (coming soon)

```bash
pip install ndirust-py
```

#### From source

```bash
# Clone the repository
git clone https://github.com/yourusername/ndirust-py.git
cd ndirust-py

# Install build dependencies
pip install maturin

# Build and install the package
maturin build --release
pip install target/wheels/ndirust_py-0.1.0-*.whl
```

## Using ndirust-py

### Finding NDI Sources

```python
import os
import ndirust_py

# Ensure NDI SDK DLL is in the PATH
ndi_sdk_path = r"C:\Program Files\NDI\NDI 6 SDK\Bin\x64"  # Adjust path as needed
os.environ["PATH"] = ndi_sdk_path + os.pathsep + os.environ["PATH"]

# Initialize NDI
ndirust_py.initialize_ndi()

# Create a finder
finder = ndirust_py.discovery.NdiFinder()

# Get available sources (with 1 second timeout)
sources = finder.find_sources(timeout_ms=1000)

# Print sources
for source in sources:
    print(f"Found source: {source}")

# Clean up
finder.close()
```

### Sending NDI Video

```python
import os
import time
import ndirust_py

# Ensure NDI SDK DLL is in the PATH
ndi_sdk_path = r"C:\Program Files\NDI\NDI 6 SDK\Bin\x64"  # Adjust path as needed
os.environ["PATH"] = ndi_sdk_path + os.pathsep + os.environ["PATH"]

# Initialize NDI
ndirust_py.initialize_ndi()

# Create an NDI sender
sender_name = "Python Test Sender"
sender = ndirust_py.sender.NdiSender(sender_name)

# Send a test pattern for 5 seconds
for i in range(150):  # 30fps * 5 seconds = 150 frames
    sender.send_test_pattern(width=1280, height=720, fps_n=30, fps_d=1)
    time.sleep(1/30)  # Sleep for approximately one frame duration

# Clean up
sender.close()
```

## API Documentation

### Core Functions

- `ndirust_py.get_version_info()`: Get version information about the library
- `ndirust_py.initialize_ndi()`: Initialize the NDI runtime
- `ndirust_py.is_supported_cpu()`: Check if NDI is supported on this CPU

### Discovery Module

- `ndirust_py.discovery.NdiFinder()`: Create a new NDI finder
  - `find_sources(timeout_ms)`: Find NDI sources on the network
  - `close()`: Free resources

### Sender Module

- `ndirust_py.sender.NdiSender(name)`: Create a new NDI sender
  - `send_test_pattern(width, height, fps_n, fps_d)`: Send a test pattern frame
  - `send_video_frame(data, width, height, fps_n, fps_d)`: Send custom video data
  - `close()`: Free resources

## Project Status

This project is in active development and some features are still being implemented:

- Complete frame receiving implementation
- Audio support
- Metadata support

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgements

- [NewTek NDI®](https://ndi.tv/) is a registered trademark of NewTek, Inc.
- [ndi crate](https://docs.rs/ndi/latest/ndi/) provides the underlying Rust bindings
- [PyO3](https://pyo3.rs) enables the Rust to Python bindings 
